{"version":3,"sources":["pages/news/style.module.css","pages/rumor/style.module.css","pages/category/style.module.css","pages/map/style.module.css","pages/home/style.module.css","services/getData.ts","utils/getMapData.ts","map/province-map.js","pages/map/Map.tsx","pages/news/News.tsx","pages/category/Category.tsx","pages/pie/Pie.tsx","pages/rumor/Rumor.tsx","pages/home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","APIKEY","getProvinceJson","pinyinName","axios","method","url","getMapData","staticList","mapList","forEach","item","mapItem","name","provinceShortName","value","confirmedCount","push","getMapProvinceData","provinceName","includes","cityName","Map","props","getOption","province","provinceMap","tooltip","show","formatter","params","data","visualMap","type","min","max","align","top","right","left","inRange","color","pieces","orient","showLabel","padding","text","itemWidth","itemHeight","textStyle","fontSize","series","silent","label","position","mapType","zoom","roam","showLegendSymbol","emphasis","rippleEffect","brushType","scale","period","state","onClick","this","className","styles","mapbox","style","height","echarts","option","notMerge","lazyUpdate","onEvents","click","e","newProps","chinaMapJson","registerMap","provinceMapJson","Component","NewItem","news","newsitem","dayjs","pubDate","format","pubDateStr","title","newscontent","summary","footer","openUrl","sourceUrl","origin","infoSource","window","open","location","href","NewList","newlist","map","index","Item","key","Category","count","addcount","category","tip","add","dataList","trigger","legend","radius","center","itemStyle","shadowBlur","shadowOffsetX","shadowColor","Pie","virusDesc","confirm","deadCount","curedCount","dead","cure","Rumor","rumorList","background","imgUrl","explain","cardbox","id","card","cover","alt","borderRadius","opacity","src","imgsrc","desc","Home","initData","a","async","res","status","newslist","setState","newsList","caseList","case","resuslt","maplist","getRumorList","toProvince","cites","cities","length","toCountry","timer","suspectedCount","seriousCount","modifyTime","virus","infectSource","passWay","remark1","remark2","confirmedIncr","suspectedIncr","deadIncr","curedIncr","seriousIncr","tabIndex","setInterval","clearInterval","columns","dataIndex","tabs","initialPage","swipeable","tabBarInactiveTextColor","tabBarActiveTextColor","tabBarUnderlineStyle","border","onChange","tab","allCountry","Body","maptip","trend","newsBox","News","rumorBox","table","pagination","expandedRowRender","showHeader","rowKey","record","dataSource","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0915bbf7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"newsitem\":\"style_newsitem__3GDJz\",\"newscontent\":\"style_newscontent__Fq2J7\",\"footer\":\"style_footer__3a63a\",\"origin\":\"style_origin__2hUNY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardbox\":\"style_cardbox__tiQww\",\"card\":\"style_card__WVS6y\",\"image\":\"style_image__2aTav\",\"tip\":\"style_tip__Ptp0H\",\"title\":\"style_title__35CVV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"category\":\"style_category__3QUH4\",\"add\":\"style_add__xqv3y\",\"tip\":\"style_tip__BaCAO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapbox\":\"style_mapbox___c_Dz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"top\":\"style_top__1VCSg\",\"title\":\"style_title__aPjei\",\"tip\":\"style_tip__1aBrD\",\"map\":\"style_map__wJWW5\",\"category\":\"style_category__3FDAB\",\"allCountry\":\"style_allCountry__3pwNJ\",\"card\":\"style_card__1UjcC\",\"maptip\":\"style_maptip__FsC97\",\"table\":\"style_table__1JI-m\",\"newsBox\":\"style_newsBox__3cHCM\",\"trend\":\"style_trend__2qaQN\",\"rumorBox\":\"style_rumorBox__2u0wc\"};","import axios from 'axios'\nconst APIKEY = '964dc226dd5b57e892e6199735b6c55f'\n// 获取疫情实时数据\nexport function getVirusDataOnTime() {\n  return axios({\n    method: 'get',\n    url: `http://api.tianapi.com/txapi/ncov/index?key=${APIKEY}`\n  })\n}\n// 获取疫情统计数据\nexport function getVirusDataStatic() {\n  return axios({\n    method: 'get',\n    url: `http://api.tianapi.com/txapi/ncovcity/index?key=${APIKEY}`\n  })\n}\n\n// 获取疫情统计数据\nexport function getRumor() {\n  return axios({\n    method: 'get',\n    url: `http://api.tianapi.com/txapi/rumour/index?key=${APIKEY}`\n  })\n}\n\n// 获取地图json文件\nexport function getChinaJson() {\n  return axios({\n    method: 'get',\n    url: `../map/china.json`\n  })\n}\n// 获取地图json文件\nexport function getProvinceJson(pinyinName) {\n  return axios({\n    method: 'get',\n    url: `../map/province/${pinyinName}.json`\n  })\n}\n","\n// 将数据格式化为地图所需格式\nexport function getMapData(staticList:[]) {\n   let mapList = [] as any\n//    for(let [index, item] of staticList.entries){\n//        console.log(item)\n//    }\n   staticList.forEach((item:any) => {\n       let mapItem = {\n           name: item.provinceShortName,\n           value: item.confirmedCount,\n           ...item\n       }\n       mapList.push(mapItem)\n   })\n   return mapList\n}\n// 将数据格式化为地图所需格式\nexport function getMapProvinceData(staticList:[],provinceName:string) {\n    let mapList = [] as any\n    if(provinceName.includes('省') || provinceName.includes('自治区')) {\n        staticList.forEach((item:any) => {\n            let mapItem = {\n                name: item.cityName + \"市\",\n                value: item.confirmedCount,\n                ...item\n            }\n            mapList.push(mapItem)\n        })\n    }else{\n        staticList.forEach((item:any) => {\n            let mapItem = {\n                name: item.cityName,\n                value: item.confirmedCount,\n                ...item\n            }\n            mapList.push(mapItem)\n        })\n    }\n    return mapList\n }","export default{\n    \"安徽\":\"anhui\",\n    \"澳门\":\"aomen\",\n    \"北京\":\"beijing\",\n    \"重庆\":\"chongqing\",\n    \"福建\":\"fujian\",\n    \"甘肃\":\"gansu\",\n    \"广东\":\"guangdong\",\n    \"广西\":\"guangxi\",\n    \"贵州\":\"guizhou\",\n    \"海南\":\"hainan\",\n    \"河北\":\"hebei\",\n    \"黑龙江\":\"heilongjiang\",\n    \"河南\":\"henan\",\n    \"湖北\":\"hubei\",\n    \"湖南\":\"hunan\",\n    \"江苏\":\"jiangsu\",\n    \"江西\":\"jiangxi\",\n    \"吉林\":\"jilin\",\n    \"辽宁\":\"liaoning\",\n    \"内蒙古\":\"neimenggu\",\n    \"宁夏\":\"ningxia\",\n    \"青海\":\"qinghai\",\n    \"山东\":\"shandong\",\n    \"上海\":\"shanghai\",\n    \"山西\":\"shanxi\",\n    \"四川\":\"sichuan\",\n    \"台湾\":\"taiwan\",\n    \"天津\":\"tianjin\",\n    \"香港\":\"xianggang\",\n    \"新疆\":\"xinjiang\",\n    \"西藏\":\"xizang\",\n    \"云南\":\"yunnan\",\n    \"浙江\":\"zhejiang\",\n    \"陕西\":\"shanxi\"\n}","import * as React from \"react\";\nimport { Component } from \"react\";\nimport ReactEcharts from \"echarts-for-react/lib/core\";\nimport echarts from \"echarts/lib/echarts\";\nimport \"echarts/lib/chart/map\";\nimport \"echarts/lib/component/visualMap\";\nimport \"echarts/lib/component/tooltip\";\nimport provinceMap from \"../../map/province-map\";\nimport {  getChinaJson, getProvinceJson } from \"../../services/getData\";\nimport styles from \"./style.module.css\";\nexport interface MapProps {\n  provinceName?: string;\n  mapList: [];\n  onClick: (val) => void\n}\n\nexport interface MapState {\n}\n\nclass Map extends Component<MapProps, MapState> {\n  constructor(props: MapProps) {\n    super(props);\n    this.state = {\n    };\n  }\n  static async getDerivedStateFromProps(newProps) { \n    //console.log(newProps)\n    const { provinceName } =newProps\n    const province = provinceName? provinceName : ''\n    if(province === ''){\n        const chinaMapJson = await getChinaJson();\n        // console.log(chinaMapJson.data)\n        echarts.registerMap(\"china\", chinaMapJson.data);\n    }else{\n        let pinyinName = provinceMap[provinceName];\n        const provinceMapJson = await getProvinceJson(pinyinName);\n        // console.log(provinceMapJson.data)\n        echarts.registerMap(pinyinName, provinceMapJson.data);\n    }\n}\n  // async componentDidMount() {\n   \n  // }\n  // async UNSAFE_componentWillReceiveProps(newProps) {\n   \n  // }\n  getOption = () => {\n    const { provinceName,mapList } = this.props\n    const province = provinceName? provinceMap[provinceName] : ''\n    const option = {\n      tooltip: {\n        show: true,\n        formatter: function(params) {\n          let tip =\n            params.name +\n            \"：<br>确诊：\" +\n            params.data[\"value\"] +\n            \"例<br>死亡：\" +\n            params.data[\"deadCount\"] +\n            \"例<br>治愈：\" +\n            params.data[\"curedCount\"] +\n            \"例\";\n          return tip;\n        }\n      },\n      visualMap: {\n        show: true,\n        type: \"piecewise\",\n        min: 0,\n        max: 2000,\n        align: \"right\",\n        top: \"2%\",\n        right: 0,\n        left: 'center',\n        inRange: {\n          color: [\"#ffc0b1\", \"#ff8c71\", \"#ef1717\", \"#9c0505\"]\n        },\n        pieces: [\n          { min: 1000 },\n          { min: 500, max: 999 },\n          { min: 100, max: 499 },\n          { min: 10, max: 99 },\n          { min: 1, max: 9 }\n        ],\n        orient: 'horizontal',\n        showLabel: true,\n        padding: 5,\n        text: [\"高\", \"低\"],\n        itemWidth: 10,\n        itemHeight: 10,\n        textStyle: {\n          fontSize: 10\n        }\n      },\n      series: [{\n        left: 'center',\n        type: 'map',\n        name: '确诊人数',\n        silent: province ? true : false,\n        label: {\n          show: true,\n          position: 'inside',\n          // margin: 8,\n          fontSize: 6\n        },\n        mapType: province ? province : 'china',\n        data: mapList,\n        zoom: 1.2,\n        roam: false,\n        showLegendSymbol: false,\n        emphasis: {},\n        rippleEffect: {\n          show: true,\n          brushType: 'stroke',\n          scale: 2.5,\n          period: 4\n        }\n      }]\n    };\n    return option;\n  }\n  render() {\n    const { onClick } = this.props\n    return (\n      <ReactEcharts\n        className={styles.mapbox}\n        style={{height:'400px'}}\n        echarts={echarts}\n        option={this.getOption()}\n        notMerge={true}\n        lazyUpdate={true}\n        onEvents={{\n          click(e) {\n            onClick(e.name);\n          }\n        }}\n      />\n    );\n  }\n}\n\nexport default Map;\n","import { Timeline, Card } from \"antd\";\nimport * as React from \"react\";\nimport { SFC } from \"react\";\nimport dayjs from \"dayjs\";\nimport styles from \"./style.module.css\";\n//无状态组件\nexport interface IProps {\n  newlist: [];\n}\nconst NewItem = news => {\n  // console.log(news);\n  return (\n    <div className={styles.newsitem}>\n      <p>\n        {dayjs(news.news.pubDate).format(\"YYYY年MM月DD日 HH:mm\")} (\n        {news.news.pubDateStr})\n      </p>\n      <Card title={news.news.title}>\n        <p className={styles.newscontent}>{news.news.summary}</p>\n        <div className={styles.footer}>\n          <p>地区:{news.news.provinceName}</p>\n          <p onClick={() => openUrl(news.news.sourceUrl)}>\n            来源:<span className={styles.origin}>{news.news.infoSource}</span>\n          </p>\n        </div>\n      </Card>\n    </div>\n  );\n};\nconst openUrl = url => {\n  const w = window.open(\"about:blank\");\n  w.location.href = url;\n};\nconst NewList: SFC<IProps> = ({ newlist }) => {\n  // console.log(newlist);\n  return (\n    <Timeline>\n      {newlist.map((item, index) => {\n        return (\n          <Timeline.Item key={index}>\n            <NewItem news={item} />\n          </Timeline.Item>\n        );\n      })}\n    </Timeline>\n  );\n};\nexport default NewList;\n","import * as React from \"react\";\nimport { SFC } from \"react\";\nimport styles from \"./style.module.css\";\n//无状态组件\nexport interface CategoryProps {\n    title: string;\n    count: number;\n    addcount:number;\n    color: string;\n}\nconst Category: SFC<CategoryProps> = ({ title,count,addcount,color }) => {\n  // console.log(newlist);\n  return (\n    <div style={{ color: color }} className={styles.category}>\n      <p>{title}</p>\n      <p>{count}例</p>\n      <p><span className={styles.tip}>较昨日</span><span className={styles.add}>+{addcount}</span></p>\n    </div>\n  );\n};\nexport default Category;\n","import * as React from \"react\";\nimport { SFC } from \"react\";\nimport ReactEcharts from \"echarts-for-react/lib/core\";\nimport echarts from \"echarts/lib/echarts\";\nimport \"echarts/lib/chart/pie\";\nimport \"echarts/lib/component/tooltip\";\nimport \"echarts/lib/component/legend\";\n\nexport interface IProps {\n  virusDesc?: {\n    confirmedCount: number\n    deadCount: number\n    curedCount: number\n  }\n}\nconst getOption = (dataList:[]) => {\n  const option = {\n    tooltip: {\n        trigger: 'item',\n        formatter: '{a} <br/>{b} : {c} ({d}%)'\n    },\n    legend: {\n        orient: 'horizontal',\n        left: 'center',\n        data: ['在诊人数', '死亡人数', '治愈人数']\n    },\n    series: [\n        {\n            name: '占比率',\n            type: 'pie',\n            radius: '55%',\n            center: ['50%', '60%'],\n            data: dataList,\n            emphasis: {\n                itemStyle: {\n                    shadowBlur: 10,\n                    shadowOffsetX: 0,\n                    shadowColor: 'rgba(0, 0, 0, 0.5)'\n                }\n            }\n        }\n    ]\n};\n  return option;\n}\nconst Pie: SFC<IProps> = ({ virusDesc }) => {\n    // console.log(virusDesc);\n    const dataList = [] as any\n    const confirm = {\n      name: '在诊人数',\n      value: virusDesc.confirmedCount-virusDesc.deadCount-virusDesc.curedCount\n    }\n    const dead = {\n      name: '死亡人数',\n      value: virusDesc.deadCount\n    }\n    const cure = {\n      name: '治愈人数',\n      value: virusDesc.curedCount\n    }\n    dataList.push(confirm)\n    dataList.push(dead)\n    dataList.push(cure)\n    return (\n      <ReactEcharts\n        // className={styles.mapbox}\n        echarts={echarts}\n        option={getOption(dataList)}\n        notMerge={true}\n        lazyUpdate={true}\n      />\n    );\n  };\n  export default Pie;","import * as React from \"react\";\nimport { Card, Carousel } from \"antd\";\nimport styles from \"./style.module.css\";\n//无状态组件\nconst Rumor = ({ rumorList }) => {\n  // console.log(rumorList);\n  return (\n    <Carousel style={{ background: \"rgb(245, 245, 249)\", height: \"450px\" }}>\n      {rumorList.map(item => {\n        let imgUrl:string = '';\n        if(item.explain === '谣言'){\n           imgUrl = \"https://assets.dxycdn.com/gitrepo/ncov-mobile/dist/static/badge-big@2x.5395c013.png\"\n        }\n        if(item.explain === '尚无定论'){\n            imgUrl = \"https://assets.dxycdn.com/gitrepo/ncov-mobile/dist/static/badge-y-big@2x.c0fd84da.png\"\n        }\n        return (\n          <div className={styles.cardbox} key={item.id}>\n            <Card\n              className={styles.card}\n              cover={\n                <img\n                  alt=\"图片\"\n                  style={{ borderRadius: \"20px 20px 0px 0px\", opacity: 0.8,height:200 }}\n                  src={item.imgsrc}\n                />\n              }\n            >\n              <img\n                src={imgUrl}\n                alt=\"\"\n                className={styles.tip}\n              />\n              <div>\n                <p className={styles.title}>{item.title}</p>\n                <p>{item.desc}</p>\n              </div>\n            </Card>\n          </div>\n        );\n      })}\n    </Carousel>\n  );\n};\nexport default Rumor;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport {\n  getVirusDataOnTime,\n  getVirusDataStatic,\n  getRumor\n} from \"../../services/getData\";\nimport { getMapData, getMapProvinceData } from \"../../utils/getMapData\";\nimport { Tabs, Card } from \"antd-mobile\";\nimport { Table, Divider } from \"antd\";\nimport dayjs from \"dayjs\";\nimport Map from \"../map/Map\";\nimport NewsList from \"../news/News\";\nimport Category from \"../category/Category\";\nimport Pie from \"../pie/Pie\";\nimport Rumor from \"../rumor/Rumor\"\nimport \"antd-mobile/dist/antd-mobile.css\";\nimport styles from \"./style.module.css\";\n\nexport interface HomeProps {}\nexport interface HomeState {\n  timer: any;\n  newsList?: [];\n  caseList?: [];\n  staticList: [];\n  mapList: [];\n  rumorList: [];\n  virusDesc?: {\n    confirmedCount: number;\n    suspectedCount: number;\n    deadCount: number;\n    curedCount: number;\n    seriousCount: number;\n    seriousIncr: number;\n    modifyTime: number;\n    virus: string;\n    infectSource: string;\n    passWay: string;\n    remark1: string;\n    remark2: string;\n    confirmedIncr: number;\n    suspectedIncr: number;\n    deadIncr: number;\n    curedIncr: number;\n  };\n  provinceName?: string;\n  tabIndex: number;\n}\n\nclass Home extends Component<HomeProps, HomeState> {\n  constructor(props: HomeProps) {\n    super(props);\n    this.state = {\n      timer: null,\n      newsList: [],\n      caseList: [],\n      virusDesc: {\n        confirmedCount: 0,\n        suspectedCount: 0,\n        deadCount: 0,\n        curedCount: 0,\n        seriousCount: 0,\n        modifyTime: 0,\n        virus: \"\",\n        infectSource: \"\",\n        passWay: \"\",\n        remark1: \"\",\n        remark2: \"\",\n        confirmedIncr: 0,\n        suspectedIncr: 0,\n        deadIncr: 0,\n        curedIncr: 0,\n        seriousIncr: 0\n      },\n      staticList: [],\n      mapList: [],\n      rumorList: [],\n      provinceName: \"\", //是否点击了某个省份\n      tabIndex: 0\n    };\n  }\n  componentDidMount() {\n    this.initData();\n    // 10分钟更新一次数据\n    this.setState({\n      timer: setInterval(() => {\n        this.initData();\n      }, 1000 * 60 * 10)\n    });\n  }\n  // 清除轮循\n  componentWillUnmount() {\n    const { timer } = this.state;\n    clearInterval(timer);\n    this.setState({ timer: null });\n  }\n  // 获取疫情数据\n  initData = async () => {\n    const res = await getVirusDataOnTime();\n    if (res.status === 200) {\n      // console.log(res.data.newslist);\n      const { news, desc } = res.data.newslist[0];\n      this.setState({\n        newsList: news,\n        virusDesc: desc,\n        caseList: res.data.newslist[0].case\n      });\n    }\n    const resuslt = await getVirusDataStatic();\n    const { newslist } = resuslt.data;\n    // console.log(result)\n    const maplist = getMapData(newslist);\n    this.setState({\n      staticList: newslist,\n      mapList: maplist\n    });\n    this.getRumorList();\n  };\n  getRumorList = async () => {\n    const res = await getRumor();\n    const { newslist} = res.data\n    // console.log(newslist);\n    this.setState({\n      rumorList: newslist\n    })\n  };\n  toProvince = province => {\n    // console.log(province)\n    const { staticList } = this.state;\n    let cites: [] = [];\n    let provinceName;\n    for (let item of staticList as any) {\n      if (province === item.provinceShortName) {\n        cites = item.cities;\n        provinceName = item.provinceName;\n        break;\n      }\n    }\n    if (cites.length !== 0) {\n      const maplist = getMapProvinceData(cites, provinceName);\n      this.setState({\n        provinceName: province,\n        mapList: maplist\n      });\n    } else {\n      return;\n    }\n  };\n  toCountry = () => {\n    const { staticList } = this.state;\n    const maplist = getMapData(staticList);\n    this.setState({\n      provinceName: \"\",\n      mapList: maplist\n    });\n  };\n  render() {\n    const { virusDesc, mapList, provinceName, tabIndex, newsList, rumorList } = this.state;\n    //console.log(newsList);\n    const tabs = [\n      { title: \"疫情地图\" },\n      { title: \"疫情趋势\" },\n      { title: \"最新消息\" },\n      { title: \"辟谣信息\" }\n    ];\n    const columns = [\n      { title: \"地区\", dataIndex: \"name\", key: \"name\" },\n      { title: \"确诊\", dataIndex: \"confirmedCount\", key: \"confirmedCount\" },\n      { title: \"死亡\", dataIndex: \"deadCount\", key: \"deadCount\" },\n      { title: \"治愈\", dataIndex: \"curedCount\", key: \"curedCount\" }\n    ];\n    const expandedRowRender = item => {\n      let mapList: [] = [];\n      if (item.provinceName) {\n        mapList = getMapProvinceData(item.cities, item.provinceName);\n      }\n      return mapList.length > 0 ? (\n        <Table\n          columns={columns}\n          showHeader={false}\n          rowKey={(record: any) => record.name}\n          dataSource={mapList}\n          pagination={false}\n        />\n      ) : null;\n    };\n\n    return (\n      <div>\n        <div className={styles.top}>\n          <p className={styles.title}>新型冠状病毒肺炎疫情</p>\n          <p className={styles.tip}>实时动态</p>\n        </div>\n        <Tabs\n          tabs={tabs}\n          initialPage={0}\n          swipeable={false}\n          tabBarInactiveTextColor=\"#616161\"\n          tabBarActiveTextColor=\"#6C63FF\"\n          tabBarUnderlineStyle={{ border: \"1px #6C63FF solid\" }}\n          onChange={(tab, index) => {\n            this.setState({\n              tabIndex: index\n            });\n          }}\n        >\n          <div className={styles.map}>\n            <span className={styles.allCountry}>全国</span>\n            <span>\n              截至{dayjs(virusDesc.modifyTime).format(\"YYYY年MM月DD日 HH:mm\")}\n              (北京时间)\n            </span>\n            <span>统计</span>\n            <div className={styles.category}>\n              <Category\n                title={\"确诊\"}\n                count={virusDesc.confirmedCount}\n                addcount={virusDesc.confirmedIncr}\n                color={\"#f44336\"}\n              />\n              <Category\n                title={\"疑似\"}\n                count={virusDesc.suspectedCount}\n                addcount={virusDesc.suspectedIncr}\n                color={\"#ef6c00\"}\n              />\n              <Category\n                title={\"重症\"}\n                count={virusDesc.seriousCount}\n                addcount={virusDesc.seriousIncr}\n                color={\"#5d4037\"}\n              />\n              <Category\n                title={\"死亡\"}\n                count={virusDesc.deadCount}\n                addcount={virusDesc.deadIncr}\n                color={\"#263238\"}\n              />\n              <Category\n                title={\"治愈\"}\n                count={virusDesc.curedCount}\n                addcount={virusDesc.curedIncr}\n                color={\"#64dd17\"}\n              />\n            </div>\n            <Card>\n              <Card.Body className={styles.card}>\n                <div>\n                  <span>病毒：</span>\n                  {virusDesc.virus}\n                </div>\n                <div>\n                  <span>传染源：</span>\n                  {virusDesc.infectSource}\n                </div>\n                <div>{virusDesc.remark1}</div>\n                <div>{virusDesc.remark2}</div>\n                <div>\n                  <span>传播途径：</span>\n                  {virusDesc.passWay}\n                </div>\n              </Card.Body>\n            </Card>\n            <Map\n              provinceName={provinceName}\n              mapList={mapList}\n              onClick={this.toProvince}\n            />\n            {provinceName ? (\n              <div className={styles.maptip} onClick={this.toCountry}>\n                返回全国\n              </div>\n            ) : null}\n          </div>\n          <div className={styles.trend}>\n            <Pie virusDesc={virusDesc} />\n            <Divider />\n            <Pie virusDesc={virusDesc} />\n          </div>\n          <div className={styles.newsBox}>\n            <NewsList newlist={newsList} />\n          </div>\n          <div className={styles.rumorBox}>\n            <Rumor rumorList={rumorList} />\n          </div>\n        </Tabs>\n        {tabIndex === 0 ? (\n          <Table\n            className={styles.table}\n            columns={columns}\n            pagination={false}\n            expandedRowRender={item => expandedRowRender(item)}\n            dataSource={mapList}\n            rowKey={(record: any) => record.name}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react'\nimport './App.css'\nimport Home from './pages/home/Home'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n        <Home />\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'babel-polyfill'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}