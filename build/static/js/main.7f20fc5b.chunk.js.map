{"version":3,"sources":["pages/news/style.module.css","pages/rumor/style.module.css","pages/category/style.module.css","pages/map/style.module.css","pages/home/style.module.css","services/getData.ts","utils/getMapData.ts","map/province-map.js","pages/map/Map.tsx","pages/news/News.tsx","pages/category/Category.tsx","pages/pie/Pie.tsx","pages/rumor/Rumor.tsx","pages/line/Line.tsx","pages/home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","APIKEY","getProvinceJson","pinyinName","axios","method","url","getMapData","staticList","mapList","forEach","item","mapItem","name","provinceShortName","value","confirmedCount","push","getMapProvinceData","provinceName","includes","cityName","安徽","澳门","北京","重庆","福建","甘肃","广东","广西","贵州","海南","河北","黑龙江","河南","湖北","湖南","江苏","江西","吉林","辽宁","内蒙古","宁夏","青海","山东","上海","山西","四川","台湾","天津","香港","新疆","西藏","云南","浙江","陕西","Map","props","getOption","province","provinceMap","tooltip","show","formatter","params","data","visualMap","type","min","max","align","top","right","left","inRange","color","pieces","orient","showLabel","padding","text","itemWidth","itemHeight","textStyle","fontSize","series","silent","label","position","mapType","zoom","roam","showLegendSymbol","emphasis","rippleEffect","brushType","scale","period","state","onClick","this","className","styles","mapbox","style","height","echarts","option","notMerge","lazyUpdate","onEvents","click","e","newProps","chinaMapJson","registerMap","provinceMapJson","Component","NewItem","news","newsitem","dayjs","pubDate","format","pubDateStr","title","newscontent","summary","footer","openUrl","sourceUrl","origin","infoSource","window","open","location","href","NewList","newlist","map","index","Item","key","Category","count","addcount","category","tip","add","dataList","trigger","legend","radius","center","itemStyle","shadowBlur","shadowOffsetX","shadowColor","Pie","virusDesc","confirm","deadCount","curedCount","dead","cure","Rumor","rumorList","background","imgUrl","explain","cardbox","id","card","cover","alt","borderRadius","opacity","src","imgsrc","desc","dateList","firstList","secondList","legendData","firstColor","secondColor","grid","bottom","containLabel","xAxis","boundaryGap","yAxis","stack","normal","lineStyle","Line","Home","initData","a","async","res","status","newslist","setState","newsList","caseList","case","resuslt","maplist","loading","getRumorList","getTrendList","trend","trendList","results","dateArr","confirmedArr","suspectedArr","deadArr","curedArr","datelist","confirmedList","suspectedList","deadList","curedList","updateTime","suspectedCount","reverse","confirmedTrendList","suspectedTrendList","deadTrendList","curedTrendList","trendLoading","toProvince","cites","cities","length","toCountry","timer","seriousCount","modifyTime","virus","infectSource","passWay","remark1","remark2","confirmedIncr","suspectedIncr","deadIncr","curedIncr","seriousIncr","tabIndex","setInterval","clearInterval","columns","dataIndex","active","paragraph","rows","tabs","initialPage","swipeable","tabBarInactiveTextColor","tabBarActiveTextColor","tabBarUnderlineStyle","border","onChange","tab","allCountry","Body","maptip","newsBox","News","rumorBox","table","pagination","expandedRowRender","showHeader","rowKey","record","dataSource","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f20fc5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"newsitem\":\"style_newsitem__3GDJz\",\"newscontent\":\"style_newscontent__Fq2J7\",\"footer\":\"style_footer__3a63a\",\"origin\":\"style_origin__2hUNY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardbox\":\"style_cardbox__tiQww\",\"card\":\"style_card__WVS6y\",\"image\":\"style_image__2aTav\",\"tip\":\"style_tip__Ptp0H\",\"title\":\"style_title__35CVV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"category\":\"style_category__3QUH4\",\"add\":\"style_add__xqv3y\",\"tip\":\"style_tip__BaCAO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapbox\":\"style_mapbox___c_Dz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"top\":\"style_top__1VCSg\",\"title\":\"style_title__aPjei\",\"tip\":\"style_tip__1aBrD\",\"map\":\"style_map__wJWW5\",\"category\":\"style_category__3FDAB\",\"allCountry\":\"style_allCountry__3pwNJ\",\"card\":\"style_card__1UjcC\",\"maptip\":\"style_maptip__FsC97\",\"table\":\"style_table__1JI-m\",\"newsBox\":\"style_newsBox__3cHCM\",\"trend\":\"style_trend__2qaQN\",\"rumorBox\":\"style_rumorBox__2u0wc\"};","import axios from 'axios'\nconst APIKEY = '964dc226dd5b57e892e6199735b6c55f'\n// 获取疫情实时数据\nexport function getVirusDataOnTime() {\n  return axios({\n    method: 'get',\n    url: `http://api.tianapi.com/txapi/ncov/index?key=${APIKEY}`\n  })\n}\n// 获取疫情统计数据\nexport function getVirusDataStatic() {\n  return axios({\n    method: 'get',\n    url: `http://api.tianapi.com/txapi/ncovcity/index?key=${APIKEY}`\n  })\n}\n\n// 获取疫情统计数据\nexport function getRumor() {\n  return axios({\n    method: 'get',\n    url: `http://api.tianapi.com/txapi/rumour/index?key=${APIKEY}`\n  })\n}\n\n// 获取疫情趋势数据\nexport function getTrend() {\n  return axios({\n    method: 'get',\n    url: `https://lab.isaaclin.cn/nCoV/api/overall?latest=0`\n  })\n}\n\n// 获取地图json文件\nexport function getChinaJson() {\n  return axios({\n    method: 'get',\n    url: `../map/china.json`\n  })\n}\n// 获取地图json文件\nexport function getProvinceJson(pinyinName) {\n  return axios({\n    method: 'get',\n    url: `../map/province/${pinyinName}.json`\n  })\n}\n","// 将数据格式化为地图所需格式\nexport function getMapData(staticList: []) {\n  let mapList = [] as any\n  //    for(let [index, item] of staticList.entries){\n  //        console.log(item)\n  //    }\n  staticList.forEach((item: any) => {\n    let mapItem = {\n      name: item.provinceShortName,\n      value: item.confirmedCount,\n      ...item\n    }\n    mapList.push(mapItem)\n  })\n  return mapList\n}\n// 将数据格式化为地图所需格式\nexport function getMapProvinceData(staticList: [], provinceName: string) {\n  let mapList = [] as any\n  if (provinceName.includes('省') || provinceName.includes('自治区')) {\n    staticList.forEach((item: any) => {\n      let mapItem = {\n        name: item.cityName + '市',\n        value: item.confirmedCount,\n        ...item\n      }\n      mapList.push(mapItem)\n    })\n  } else {\n    staticList.forEach((item: any) => {\n      let mapItem = {\n        name: item.cityName,\n        value: item.confirmedCount,\n        ...item\n      }\n      mapList.push(mapItem)\n    })\n  }\n  return mapList\n}\n","export default {\n  安徽: 'anhui',\n  澳门: 'aomen',\n  北京: 'beijing',\n  重庆: 'chongqing',\n  福建: 'fujian',\n  甘肃: 'gansu',\n  广东: 'guangdong',\n  广西: 'guangxi',\n  贵州: 'guizhou',\n  海南: 'hainan',\n  河北: 'hebei',\n  黑龙江: 'heilongjiang',\n  河南: 'henan',\n  湖北: 'hubei',\n  湖南: 'hunan',\n  江苏: 'jiangsu',\n  江西: 'jiangxi',\n  吉林: 'jilin',\n  辽宁: 'liaoning',\n  内蒙古: 'neimenggu',\n  宁夏: 'ningxia',\n  青海: 'qinghai',\n  山东: 'shandong',\n  上海: 'shanghai',\n  山西: 'shanxi',\n  四川: 'sichuan',\n  台湾: 'taiwan',\n  天津: 'tianjin',\n  香港: 'xianggang',\n  新疆: 'xinjiang',\n  西藏: 'xizang',\n  云南: 'yunnan',\n  浙江: 'zhejiang',\n  陕西: 'shanxi'\n}\n","import * as React from 'react'\nimport { Component } from 'react'\nimport ReactEcharts from 'echarts-for-react/lib/core'\nimport echarts from 'echarts/lib/echarts'\nimport 'echarts/lib/chart/map'\nimport 'echarts/lib/component/visualMap'\nimport 'echarts/lib/component/tooltip'\nimport provinceMap from '../../map/province-map'\nimport { getChinaJson, getProvinceJson } from '../../services/getData'\nimport styles from './style.module.css'\nexport interface MapProps {\n  provinceName?: string\n  mapList: []\n  onClick: (val) => void\n}\n\nexport interface MapState {}\n\nclass Map extends Component<MapProps, MapState> {\n  constructor(props: MapProps) {\n    super(props)\n    this.state = {}\n  }\n  static async getDerivedStateFromProps(newProps) {\n    //console.log(newProps)\n    const { provinceName } = newProps\n    const province = provinceName ? provinceName : ''\n    if (province === '') {\n      const chinaMapJson = await getChinaJson()\n      // console.log(chinaMapJson.data)\n      echarts.registerMap('china', chinaMapJson.data)\n    } else {\n      let pinyinName = provinceMap[provinceName]\n      const provinceMapJson = await getProvinceJson(pinyinName)\n      // console.log(provinceMapJson.data)\n      echarts.registerMap(pinyinName, provinceMapJson.data)\n    }\n  }\n  // async componentDidMount() {\n\n  // }\n  // async UNSAFE_componentWillReceiveProps(newProps) {\n\n  // }\n  getOption = () => {\n    const { provinceName, mapList } = this.props\n    const province = provinceName ? provinceMap[provinceName] : ''\n    const option = {\n      tooltip: {\n        show: true,\n        formatter: function(params) {\n          let tip =\n            params.name +\n            '：<br>确诊：' +\n            params.data['value'] +\n            '例<br>死亡：' +\n            params.data['deadCount'] +\n            '例<br>治愈：' +\n            params.data['curedCount'] +\n            '例'\n          return tip\n        }\n      },\n      visualMap: {\n        show: true,\n        type: 'piecewise',\n        min: 0,\n        max: 2000,\n        align: 'right',\n        top: '2%',\n        right: 0,\n        left: 'center',\n        inRange: {\n          color: ['#ffc0b1', '#ff8c71', '#ef1717', '#9c0505']\n        },\n        pieces: [\n          { min: 1000 },\n          { min: 500, max: 999 },\n          { min: 100, max: 499 },\n          { min: 10, max: 99 },\n          { min: 1, max: 9 }\n        ],\n        orient: 'horizontal',\n        showLabel: true,\n        padding: 5,\n        text: ['高', '低'],\n        itemWidth: 10,\n        itemHeight: 10,\n        textStyle: {\n          fontSize: 10\n        }\n      },\n      series: [\n        {\n          left: 'center',\n          type: 'map',\n          name: '确诊人数',\n          silent: province ? true : false,\n          label: {\n            show: true,\n            position: 'inside',\n            // margin: 8,\n            fontSize: 6\n          },\n          mapType: province ? province : 'china',\n          data: mapList,\n          zoom: 1.2,\n          roam: false,\n          showLegendSymbol: false,\n          emphasis: {},\n          rippleEffect: {\n            show: true,\n            brushType: 'stroke',\n            scale: 2.5,\n            period: 4\n          }\n        }\n      ]\n    }\n    return option\n  }\n  render() {\n    const { onClick } = this.props\n    return (\n      <ReactEcharts\n        className={styles.mapbox}\n        style={{ height: '400px' }}\n        echarts={echarts}\n        option={this.getOption()}\n        notMerge={true}\n        lazyUpdate={true}\n        onEvents={{\n          click(e) {\n            onClick(e.name)\n          }\n        }}\n      />\n    )\n  }\n}\n\nexport default Map\n","import { Timeline, Card } from 'antd'\nimport * as React from 'react'\nimport { SFC } from 'react'\nimport dayjs from 'dayjs'\nimport styles from './style.module.css'\n//无状态组件\nexport interface IProps {\n  newlist: []\n}\nconst NewItem = (news) => {\n  // console.log(news);\n  return (\n    <div className={styles.newsitem}>\n      <p>\n        {dayjs(news.news.pubDate).format('YYYY年MM月DD日 HH:mm')} ({news.news.pubDateStr})\n      </p>\n      <Card title={news.news.title}>\n        <p className={styles.newscontent}>{news.news.summary}</p>\n        <div className={styles.footer}>\n          <p>地区:{news.news.provinceName}</p>\n          <p onClick={() => openUrl(news.news.sourceUrl)}>\n            来源:<span className={styles.origin}>{news.news.infoSource}</span>\n          </p>\n        </div>\n      </Card>\n    </div>\n  )\n}\nconst openUrl = (url) => {\n  const w = window.open('about:blank')\n  w.location.href = url\n}\nconst NewList: SFC<IProps> = ({ newlist }) => {\n  // console.log(newlist);\n  return (\n    <Timeline>\n      {newlist.map((item, index) => {\n        return (\n          <Timeline.Item key={index}>\n            <NewItem news={item} />\n          </Timeline.Item>\n        )\n      })}\n    </Timeline>\n  )\n}\nexport default NewList\n","import * as React from 'react'\nimport { SFC } from 'react'\nimport styles from './style.module.css'\n//无状态组件\nexport interface CategoryProps {\n  title: string\n  count: number\n  addcount: number\n  color: string\n}\nconst Category: SFC<CategoryProps> = ({ title, count, addcount, color }) => {\n  // console.log(newlist);\n  return (\n    <div style={{ color: color }} className={styles.category}>\n      <p>{title}</p>\n      <p>{count}例</p>\n      <p>\n        <span className={styles.tip}>较昨日</span>\n        <span className={styles.add}>+{addcount}</span>\n      </p>\n    </div>\n  )\n}\nexport default Category\n","import * as React from 'react'\nimport { SFC } from 'react'\nimport ReactEcharts from 'echarts-for-react/lib/core'\nimport echarts from 'echarts/lib/echarts'\nimport 'echarts/lib/chart/pie'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/legend'\n\nexport interface IProps {\n  virusDesc?: {\n    confirmedCount: number\n    deadCount: number\n    curedCount: number\n  }\n}\nconst getOption = (dataList: []) => {\n  const option = {\n    tooltip: {\n      trigger: 'item',\n      formatter: '{a} <br/>{b} : {c} ({d}%)'\n    },\n    legend: {\n      orient: 'horizontal',\n      left: 'center',\n      data: ['在诊人数', '死亡人数', '治愈人数']\n    },\n    color:['#e57471', '#919399','#7ebe50'],\n    series: [\n      {\n        name: '占比率',\n        type: 'pie',\n        radius: '55%',\n        center: ['50%', '60%'],\n        data: dataList,\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\n          }\n        }\n      }\n    ]\n  }\n  return option\n}\nconst Pie: SFC<IProps> = ({ virusDesc }) => {\n  // console.log(virusDesc);\n  const dataList = [] as any\n  const confirm = {\n    name: '在诊人数',\n    value: virusDesc.confirmedCount - virusDesc.deadCount - virusDesc.curedCount\n  }\n  const dead = {\n    name: '死亡人数',\n    value: virusDesc.deadCount\n  }\n  const cure = {\n    name: '治愈人数',\n    value: virusDesc.curedCount\n  }\n  dataList.push(confirm)\n  dataList.push(dead)\n  dataList.push(cure)\n  return (\n    <ReactEcharts\n      // className={styles.mapbox}\n      echarts={echarts}\n      option={getOption(dataList)}\n      notMerge={true}\n      lazyUpdate={true}\n    />\n  )\n}\nexport default Pie\n","import * as React from 'react'\nimport { Card, Carousel } from 'antd'\nimport styles from './style.module.css'\n//无状态组件\nconst Rumor = ({ rumorList }) => {\n  // console.log(rumorList);\n  return (\n    <Carousel style={{ background: 'rgb(245, 245, 249)', height: '450px' }}>\n      {rumorList.map((item) => {\n        let imgUrl: string = ''\n        if (item.explain === '谣言' || item.explain === '伪科学' || item.explain === '有失实') {\n          imgUrl = 'https://assets.dxycdn.com/gitrepo/ncov-mobile/dist/static/badge-big@2x.5395c013.png'\n        }\n        if (item.explain === '尚无定论') {\n          imgUrl = 'https://assets.dxycdn.com/gitrepo/ncov-mobile/dist/static/badge-y-big@2x.c0fd84da.png'\n        }\n        return (\n          <div className={styles.cardbox} key={item.id}>\n            <Card\n              className={styles.card}\n              cover={\n                <img\n                  alt=\"图片\"\n                  style={{ borderRadius: '20px 20px 0px 0px', opacity: 0.8, height: 200 }}\n                  src={item.imgsrc}\n                />\n              }\n            >\n              <img src={imgUrl} alt=\"\" className={styles.tip} />\n              <div>\n                <p className={styles.title}>{item.title}</p>\n                <p>{item.desc}</p>\n              </div>\n            </Card>\n          </div>\n        )\n      })}\n    </Carousel>\n  )\n}\nexport default Rumor\n","import * as React from 'react'\nimport { SFC } from 'react'\nimport ReactEcharts from 'echarts-for-react/lib/core'\nimport echarts from 'echarts/lib/echarts'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/component/grid'\n\nexport interface IProps {\n  dateList: []\n  firstList: []\n  secondList: []\n  legendData: string[],\n  firstColor:string,\n  secondColor:string\n}\nconst getOption = (dateList: [], firstList: [], secondList: [], legendData: string[],firstColor: string,secondColor:string) => {\n  const option = {\n    tooltip: {\n      trigger: 'axis'\n    },\n    legend: {\n      orient: 'horizontal',\n      left: 'center',\n      data: legendData\n    },\n    grid: {\n      left: '3%',\n      right: '4%',\n      bottom: '3%',\n      containLabel: true\n    },\n    xAxis: {\n      type: 'category',\n      boundaryGap: false,\n      data: dateList\n    },\n    yAxis: {\n      type: 'value'\n    },\n    series: [\n      {\n        name: legendData[0],\n        type: 'line',\n        stack: '总量',\n        itemStyle: {\n          normal: {\n            color: firstColor,\n            lineStyle: {\n              color: firstColor\n            }\n          }\n        },\n        data: firstList\n      },\n      {\n        name: legendData[1],\n        type: 'line',\n        stack: '总量',\n        itemStyle: {\n            normal: {\n              color: secondColor,\n              lineStyle: {\n                color: secondColor\n              }\n            }\n          },\n        data: secondList\n      }\n    ]\n  }\n  return option\n}\nconst Line: SFC<IProps> = ({ dateList, firstList, secondList, legendData, firstColor, secondColor }) => {\n  // console.log(trendList);\n  return (\n    <ReactEcharts\n      // className={styles.mapbox}\n      echarts={echarts}\n      option={getOption(dateList, firstList, secondList, legendData, firstColor, secondColor)}\n      notMerge={true}\n      lazyUpdate={true}\n    />\n  )\n}\nexport default Line\n","import * as React from 'react'\nimport { Component } from 'react'\nimport { getVirusDataOnTime, getVirusDataStatic, getRumor, getTrend } from '../../services/getData'\nimport { getMapData, getMapProvinceData } from '../../utils/getMapData'\nimport Card from 'antd-mobile/lib/card'\nimport Tabs from 'antd-mobile/lib/tabs'\nimport 'antd-mobile/lib/card/style/css'\nimport 'antd-mobile/lib/tabs/style/css'\nimport { Table, Divider,Skeleton } from 'antd'\nimport dayjs from 'dayjs'\nimport Map from '../map/Map'\nimport NewsList from '../news/News'\nimport Category from '../category/Category'\nimport Pie from '../pie/Pie'\nimport Rumor from '../rumor/Rumor'\nimport Line from '../line/Line'\nimport styles from './style.module.css'\n\nexport interface HomeProps {}\nexport interface HomeState {\n  timer: any\n  newsList?: []\n  caseList?: []\n  staticList: []\n  mapList: []\n  rumorList: []\n  dateList: []\n  confirmedTrendList: []\n  suspectedTrendList: []\n  deadTrendList: []\n  curedTrendList: []\n  virusDesc?: {\n    confirmedCount: number\n    suspectedCount: number\n    deadCount: number\n    curedCount: number\n    seriousCount: number\n    seriousIncr: number\n    modifyTime: number\n    virus: string\n    infectSource: string\n    passWay: string\n    remark1: string\n    remark2: string\n    confirmedIncr: number\n    suspectedIncr: number\n    deadIncr: number\n    curedIncr: number\n  }\n  provinceName?: string\n  tabIndex: number\n  loading: boolean\n  trendLoading: boolean\n}\n\nclass Home extends Component<HomeProps, HomeState> {\n  constructor(props: HomeProps) {\n    super(props)\n    this.state = {\n      timer: null,\n      newsList: [],\n      caseList: [],\n      virusDesc: {\n        confirmedCount: 0,\n        suspectedCount: 0,\n        deadCount: 0,\n        curedCount: 0,\n        seriousCount: 0,\n        modifyTime: 0,\n        virus: '',\n        infectSource: '',\n        passWay: '',\n        remark1: '',\n        remark2: '',\n        confirmedIncr: 0,\n        suspectedIncr: 0,\n        deadIncr: 0,\n        curedIncr: 0,\n        seriousIncr: 0\n      },\n      staticList: [],\n      mapList: [],\n      rumorList: [],\n      provinceName: '', //是否点击了某个省份\n      tabIndex: 0,\n      dateList: [],\n      confirmedTrendList: [],\n      suspectedTrendList: [],\n      deadTrendList: [],\n      curedTrendList: [],\n      loading: true,\n      trendLoading:true\n    }\n  }\n  componentDidMount() {\n    this.initData()\n    // 10分钟更新一次数据\n    this.setState({\n      timer: setInterval(() => {\n        this.initData()\n      }, 1000 * 60 * 10)\n    })\n  }\n  // 清除轮循\n  componentWillUnmount() {\n    const { timer } = this.state\n    clearInterval(timer)\n    this.setState({ timer: null })\n  }\n  // 获取疫情数据\n  initData = async () => {\n    const res = await getVirusDataOnTime()\n    if (res.status === 200) {\n      // console.log(res.data.newslist);\n      const { news, desc } = res.data.newslist[0]\n      this.setState({\n        newsList: news,\n        virusDesc: desc,\n        caseList: res.data.newslist[0].case\n      })\n    }\n    const resuslt = await getVirusDataStatic()\n    const { newslist } = resuslt.data\n    // console.log(newslist)\n    const maplist = getMapData(newslist)\n    this.setState({\n      staticList: newslist,\n      mapList: maplist,\n      loading: false\n    })\n    this.getRumorList()\n\n    // console.log(trend)\n  }\n  getRumorList = async () => {\n    const res = await getRumor()\n    const { newslist } = res.data\n    // console.log(newslist)\n    this.setState({\n      rumorList: newslist\n    })\n  }\n  getTrendList = async () => {\n    const trend = await getTrend()\n    // console.log(trend);\n    const trendList = trend.data.results\n    let dateArr = [] as any\n    let confirmedArr = [] as any\n    let suspectedArr = [] as any\n    let deadArr = [] as any\n    let curedArr = [] as any\n    let datelist = [] as any\n    let confirmedList = [] as any\n    let suspectedList = [] as any\n    let deadList = [] as any\n    let curedList = [] as any\n    trendList.forEach((item: any) => {\n      dateArr.push(dayjs(item.updateTime).format('MM-DD'))\n      confirmedArr.push(item.confirmedCount)\n      suspectedArr.push(item.suspectedCount)\n      deadArr.push(item.deadCount)\n      curedArr.push(item.curedCount)\n    })\n    dateArr.reverse().forEach((item, index) => {\n      if (item !== dateArr[index + 1]) {\n        datelist.push(item)\n        confirmedList.push(confirmedArr[index])\n        suspectedList.push(suspectedArr[index])\n        deadList.push(deadArr[index])\n        curedList.push(curedArr[index])\n      }\n    })\n    this.setState({\n      dateList: datelist,\n      confirmedTrendList: confirmedList.reverse(),\n      suspectedTrendList: suspectedList.reverse(),\n      deadTrendList: deadList.reverse(),\n      curedTrendList: curedList.reverse(),\n      trendLoading: false\n    })\n  }\n  toProvince = (province) => {\n    // console.log(province)\n    const { staticList } = this.state\n    let cites: [] = []\n    let provinceName\n    for (let item of staticList as any) {\n      if (province === item.provinceShortName) {\n        cites = item.cities\n        provinceName = item.provinceName\n        break\n      }\n    }\n    if (cites.length !== 0) {\n      const maplist = getMapProvinceData(cites, provinceName)\n      this.setState({\n        provinceName: province,\n        mapList: maplist\n      })\n    } else {\n      return\n    }\n  }\n  toCountry = () => {\n    const { staticList } = this.state\n    const maplist = getMapData(staticList)\n    this.setState({\n      provinceName: '',\n      mapList: maplist\n    })\n  }\n  render() {\n    const {\n      virusDesc,\n      mapList,\n      provinceName,\n      tabIndex,\n      newsList,\n      rumorList,\n      dateList,\n      confirmedTrendList,\n      suspectedTrendList,\n      deadTrendList,\n      curedTrendList,\n      loading,\n      trendLoading\n    } = this.state\n    //console.log(newsList);\n    const tabs = [{ title: '疫情地图' }, { title: '疫情趋势' }, { title: '最新消息' }, { title: '辟谣信息' }]\n    const columns = [\n      { title: '地区', dataIndex: 'name', key: 'name' },\n      { title: '确诊', dataIndex: 'confirmedCount', key: 'confirmedCount' },\n      { title: '死亡', dataIndex: 'deadCount', key: 'deadCount' },\n      { title: '治愈', dataIndex: 'curedCount', key: 'curedCount' }\n    ]\n    const expandedRowRender = (item) => {\n      let mapList: [] = []\n      if (item.provinceName) {\n        mapList = getMapProvinceData(item.cities, item.provinceName)\n      }\n      return mapList.length > 0 ? (\n        <Table\n          columns={columns}\n          showHeader={false}\n          rowKey={(record: any) => record.name}\n          dataSource={mapList}\n          pagination={false}\n        />\n      ) : null\n    }\n\n    return (\n      <Skeleton loading={loading} active paragraph={{ rows: 50 }}>\n        <div>\n          <div className={styles.top}>\n            <p className={styles.title}>新型冠状病毒肺炎疫情</p>\n            <p className={styles.tip}>实时动态</p>\n          </div>\n          <Tabs\n            tabs={tabs}\n            initialPage={0}\n            swipeable={false}\n            tabBarInactiveTextColor=\"#616161\"\n            tabBarActiveTextColor=\"#6C63FF\"\n            tabBarUnderlineStyle={{ border: '1px #6C63FF solid' }}\n            onChange={(tab, index) => {\n              if (index === 1) {\n                this.getTrendList()\n              }\n              this.setState({\n                tabIndex: index\n              })\n            }}\n          >\n            <div className={styles.map}>\n              <span className={styles.allCountry}>全国</span>\n              <span>\n                截至{dayjs(virusDesc.modifyTime).format('YYYY年MM月DD日 HH:mm')}\n                (北京时间)\n              </span>\n              <span>统计</span>\n              <div className={styles.category}>\n                <Category\n                  title={'确诊'}\n                  count={virusDesc.confirmedCount}\n                  addcount={virusDesc.confirmedIncr}\n                  color={'#e57471'}\n                />\n                <Category\n                  title={'疑似'}\n                  count={virusDesc.suspectedCount}\n                  addcount={virusDesc.suspectedIncr}\n                  color={'#dda451'}\n                />\n                <Category\n                  title={'重症'}\n                  count={virusDesc.seriousCount}\n                  addcount={virusDesc.seriousIncr}\n                  color={'#5d4037'}\n                />\n                <Category title={'死亡'} count={virusDesc.deadCount} addcount={virusDesc.deadIncr} color={'#919399'} />\n                <Category\n                  title={'治愈'}\n                  count={virusDesc.curedCount}\n                  addcount={virusDesc.curedIncr}\n                  color={'#7ebe50'}\n                />\n              </div>\n              <Card>\n                <Card.Body className={styles.card}>\n                  <div>\n                    <span>病毒：</span>\n                    {virusDesc.virus}\n                  </div>\n                  <div>\n                    <span>传染源：</span>\n                    {virusDesc.infectSource}\n                  </div>\n                  <div>{virusDesc.remark1}</div>\n                  <div>{virusDesc.remark2}</div>\n                  <div>\n                    <span>传播途径：</span>\n                    {virusDesc.passWay}\n                  </div>\n                </Card.Body>\n              </Card>\n              <Map provinceName={provinceName} mapList={mapList} onClick={this.toProvince} />\n              {provinceName ? (\n                <div className={styles.maptip} onClick={this.toCountry}>\n                  返回全国\n                </div>\n              ) : null}\n            </div>\n            <div className={styles.trend}>\n            <Skeleton loading={trendLoading} active paragraph={{ rows:15 }}>\n              <Line\n                dateList={dateList}\n                firstList={confirmedTrendList}\n                secondList={suspectedTrendList}\n                firstColor={'#e57471'}\n                secondColor={'#dda451'}\n                legendData={['确诊人数', '疑似人数']}\n              />\n              <Divider />\n              <Line\n                dateList={dateList}\n                firstList={deadTrendList}\n                secondList={curedTrendList}\n                firstColor={'#919399'}\n                secondColor={'#7ebe50'}\n                legendData={['死亡人数', '治愈人数']}\n              />\n              <Divider />\n              <Pie virusDesc={virusDesc} />\n              </Skeleton>\n            </div>\n            <div className={styles.newsBox}>\n              <NewsList newlist={newsList} />\n            </div>\n            <div className={styles.rumorBox}>\n              <Rumor rumorList={rumorList} />\n            </div>\n          </Tabs>\n          {tabIndex === 0 ? (\n            <Table\n              className={styles.table}\n              columns={columns}\n              pagination={false}\n              expandedRowRender={(item) => expandedRowRender(item)}\n              dataSource={mapList}\n              rowKey={(record: any) => record.name}\n            />\n          ) : null}\n        </div>\n      </Skeleton>\n    )\n  }\n}\n\nexport default Home\n","import React from 'react'\nimport './App.css'\nimport Home from './pages/home/Home'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'babel-polyfill'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}